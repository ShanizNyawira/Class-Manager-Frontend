{"ast":null,"code":"// import React, {useState} from 'react';\n// import Swal from 'sweetalert2';\n\n// function Edit({students, selectedStudent, setStudents, setIsEditing}) {\n//   const id = selectedStudent.id;\n\n//   const [name, setName] = useState(selectedStudent.name);\n//   const [email, setEmail] = useState(selectedStudent.email);\n//   const [age, setAge] = useState(selectedStudent.age);\n//   const [courseId, setCourseId] = useState(selectedStudent.course_id);\n\n//   const handleUpdate = (e) => {\n//     e.preventDefault();\n\n//     if (!name || !email || !age || !courseId) {\n//       return Swal.fire({\n//         icon: 'error',\n//         title: 'Error!',\n//         text: 'All fields are required.',\n//         showConfirmButton: true,\n//       });\n//     }\n\n//     const student = {\n//       id,\n//       name,\n//       email,\n//       age,\n//       course_id: courseId,\n//     };\n\n//     fetch('http://localhost:9292/students/' + selectedStudent.id, {\n//       method: 'PATCH',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(student),\n//     })\n//       .then((res) => res.json())\n//       .then((data) => {\n//         const index = students.findIndex(\n//           (item) => item.id === selectedStudent.id,\n//         );\n//         if (index === -1) {\n//           setStudents([...students, data]);\n//           return;\n//         }\n//         setStudents([\n//           ...students.slice(0, index),\n//           data,\n//           ...students.slice(index + 1),\n//         ]);\n//       })\n//       .catch((e) => {\n//         console.error(e);\n//         Swal.fire({\n//           icon: 'warning',\n//           title: 'Error',\n//           text: 'Sorry, something went wrong please try again later',\n//           showConfirmButton: false,\n//           timer: 1500,\n//         });\n//       });\n\n//     setIsEditing(false);\n\n//     Swal.fire({\n//       icon: 'success',\n//       title: 'Updated!',\n//       text: `${student.name} 's data has been updated.`,\n//       showConfirmButton: false,\n//       timer: 1500,\n//     });\n//   };\n\n//   return (\n//     <div className=\"small-container\">\n//       <form onSubmit={handleUpdate}>\n//         <h1>Edit Students</h1>\n//         <label htmlFor=\"name\"> name</label>\n//         <input\n//           id=\"name\"\n//           type=\"text\"\n//           name=\"name\"\n//           value={name}\n//           onChange={(e) => setName(e.target.value)}\n//         />\n\n//         <label htmlFor=\"email\">Email</label>\n//         <input\n//           id=\"email\"\n//           type=\"email\"\n//           name=\"email\"\n//           value={email}\n//           onChange={(e) => setEmail(e.target.value)}\n//         />\n//         <label htmlFor=\"courseId\">course ID </label>\n//         <input\n//           id=\"courseId\"\n//           type=\"number\"\n//           name=\"courseId\"\n//           value={courseId}\n//           onChange={(e) => setCourseId(e.target.value)}\n//         />\n\n//         <label htmlFor=\"age\">Age</label>\n//         <input\n//           id=\"age\"\n//           type=\"number\"\n//           name=\"age\"\n//           value={age}\n//           onChange={(e) => setAge(e.target.value)}\n//         />\n\n//         <div style={{marginTop: '30px'}}>\n//           <input type=\"submit\" value=\"Update\" />\n//           <input\n//             style={{marginLeft: '12px'}}\n//             className=\"muted-button\"\n//             type=\"button\"\n//             value=\"Cancel\"\n//             onClick={() => setIsEditing(false)}\n//           />\n//         </div>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default Edit;","map":{"version":3,"names":[],"sources":["/home/kimotho/Desktop/Class-Manager-Frontend/src/components/Page/Students/EditStudent.js"],"sourcesContent":["// import React, {useState} from 'react';\n// import Swal from 'sweetalert2';\n\n// function Edit({students, selectedStudent, setStudents, setIsEditing}) {\n//   const id = selectedStudent.id;\n\n//   const [name, setName] = useState(selectedStudent.name);\n//   const [email, setEmail] = useState(selectedStudent.email);\n//   const [age, setAge] = useState(selectedStudent.age);\n//   const [courseId, setCourseId] = useState(selectedStudent.course_id);\n\n//   const handleUpdate = (e) => {\n//     e.preventDefault();\n\n//     if (!name || !email || !age || !courseId) {\n//       return Swal.fire({\n//         icon: 'error',\n//         title: 'Error!',\n//         text: 'All fields are required.',\n//         showConfirmButton: true,\n//       });\n//     }\n\n//     const student = {\n//       id,\n//       name,\n//       email,\n//       age,\n//       course_id: courseId,\n//     };\n\n//     fetch('http://localhost:9292/students/' + selectedStudent.id, {\n//       method: 'PATCH',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(student),\n//     })\n//       .then((res) => res.json())\n//       .then((data) => {\n//         const index = students.findIndex(\n//           (item) => item.id === selectedStudent.id,\n//         );\n//         if (index === -1) {\n//           setStudents([...students, data]);\n//           return;\n//         }\n//         setStudents([\n//           ...students.slice(0, index),\n//           data,\n//           ...students.slice(index + 1),\n//         ]);\n//       })\n//       .catch((e) => {\n//         console.error(e);\n//         Swal.fire({\n//           icon: 'warning',\n//           title: 'Error',\n//           text: 'Sorry, something went wrong please try again later',\n//           showConfirmButton: false,\n//           timer: 1500,\n//         });\n//       });\n\n//     setIsEditing(false);\n\n//     Swal.fire({\n//       icon: 'success',\n//       title: 'Updated!',\n//       text: `${student.name} 's data has been updated.`,\n//       showConfirmButton: false,\n//       timer: 1500,\n//     });\n//   };\n\n//   return (\n//     <div className=\"small-container\">\n//       <form onSubmit={handleUpdate}>\n//         <h1>Edit Students</h1>\n//         <label htmlFor=\"name\"> name</label>\n//         <input\n//           id=\"name\"\n//           type=\"text\"\n//           name=\"name\"\n//           value={name}\n//           onChange={(e) => setName(e.target.value)}\n//         />\n\n//         <label htmlFor=\"email\">Email</label>\n//         <input\n//           id=\"email\"\n//           type=\"email\"\n//           name=\"email\"\n//           value={email}\n//           onChange={(e) => setEmail(e.target.value)}\n//         />\n//         <label htmlFor=\"courseId\">course ID </label>\n//         <input\n//           id=\"courseId\"\n//           type=\"number\"\n//           name=\"courseId\"\n//           value={courseId}\n//           onChange={(e) => setCourseId(e.target.value)}\n//         />\n\n//         <label htmlFor=\"age\">Age</label>\n//         <input\n//           id=\"age\"\n//           type=\"number\"\n//           name=\"age\"\n//           value={age}\n//           onChange={(e) => setAge(e.target.value)}\n//         />\n\n//         <div style={{marginTop: '30px'}}>\n//           <input type=\"submit\" value=\"Update\" />\n//           <input\n//             style={{marginLeft: '12px'}}\n//             className=\"muted-button\"\n//             type=\"button\"\n//             value=\"Cancel\"\n//             onClick={() => setIsEditing(false)}\n//           />\n//         </div>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default Edit;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}